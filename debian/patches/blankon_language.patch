This patch was taken from gnome-control-center 52_region_language.patch,
where relevent language code used to live in 3.6

Description: Adapts the region capplet and the language chooser in the user accounts capplet
Forwarded: https://bugzilla.gnome.org/695939, https://bugzilla.gnome.org/695940
Author: Gunnar Hjalmarsson <gunnarhj@ubuntu.com>
Last-Update: 2013-04-10

 * Ubuntu isn't shipped with all languages installed and all locales generated.
   Instead the users install the needed language pack(s), and the corresponding
   locales are generated.

 * Locales stored with codeset '.UTF-8' instead of '.utf8'.

 * The 'common_name' field taken into account when parsing the iso-codes XML files
   for language names.

---
 libgnome-desktop/gnome-languages.c | 75 +++++++++++++++++++++++++++++---------
 1 file changed, 57 insertions(+), 18 deletions(-)

diff --git a/libgnome-desktop/gnome-languages.c b/libgnome-desktop/gnome-languages.c
index 18e3705..eaa6622 100644
--- a/libgnome-desktop/gnome-languages.c
+++ b/libgnome-desktop/gnome-languages.c
@@ -97,6 +97,7 @@ normalize_codeset (const char *codeset)
         char *q;
 
         normalized_codeset = g_strdup (codeset);
+        return normalized_codeset;
 
         if (codeset != NULL) {
                 for (p = codeset, q = normalized_codeset;
@@ -242,6 +243,7 @@ construct_language_name (const char *language,
                          const char *codeset,
                          const char *modifier)
 {
+        const char *adj_codeset;
         char *name;
 
         g_assert (language[0] != 0);
@@ -249,12 +251,17 @@ construct_language_name (const char *language,
         g_assert (codeset == NULL || codeset[0] != 0);
         g_assert (modifier == NULL || modifier[0] != 0);
 
+        if (g_strcmp0 (codeset, "utf8") == 0) {
+                adj_codeset = "UTF-8";
+        } else
+                adj_codeset = codeset;
+
         name = g_strdup_printf ("%s%s%s%s%s%s%s",
                                 language,
                                 territory != NULL? "_" : "",
                                 territory != NULL? territory : "",
                                 codeset != NULL? "." : "",
-                                codeset != NULL? codeset : "",
+                                codeset != NULL? adj_codeset : "",
                                 modifier != NULL? "@" : "",
                                 modifier != NULL? modifier : "");
 
@@ -315,7 +322,6 @@ language_name_is_valid (const char *language_name)
 #else
         int lc_type_id = LC_MESSAGES;
 #endif
-
         old_locale = g_strdup (setlocale (lc_type_id, NULL));
         is_valid = setlocale (lc_type_id, language_name) != NULL;
         setlocale (lc_type_id, old_locale);
@@ -347,8 +353,7 @@ language_name_get_codeset_details (const char  *language_name,
 
         if (is_utf8 != NULL) {
                 codeset = normalize_codeset (codeset);
-
-                *is_utf8 = strcmp (codeset, "utf8") == 0;
+                *is_utf8 = strcmp (codeset, "UTF-8") == 0;
                 g_free (codeset);
         }
 
@@ -419,8 +424,7 @@ add_locale (const char *language_name,
         if (is_utf8) {
                 name = g_strdup (language_name);
         } else if (utf8_only) {
-                name = g_strdup_printf ("%s.utf8", language_name);
-
+                name = g_strdup_printf ("%s.UTF-8", language_name);
                 language_name_get_codeset_details (name, NULL, &is_utf8);
                 if (!is_utf8) {
                         g_free (name);
@@ -631,6 +635,30 @@ collect_locales_from_directory (void)
         return found_locales;
 }
 
+static gboolean
+collect_locales_from_ubuntu (void)
+{
+        /* Add installed languages */
+        gboolean found_locales = FALSE;
+        char *name;
+        gchar  *avail_languages;
+        GError *error = NULL;
+        if (g_spawn_command_line_sync ("/usr/share/language-tools/language-options",
+                                        &avail_languages, NULL, NULL, &error)) {
+                name = strtok (avail_languages, "\n");
+                while (name != NULL) {
+                        if (add_locale (name, TRUE))
+                                found_locales = TRUE;
+                        name = strtok (NULL, "\n");
+                }
+                g_free (avail_languages);
+        } else {
+                g_warning ("Couldn't get available locales: %s", error->message);
+                g_error_free (error);
+        }
+        return found_locales;
+}
+
 static void
 count_languages_and_territories (void)
 {
@@ -667,23 +695,16 @@ count_languages_and_territories (void)
 static void
 collect_locales (void)
 {
-        gboolean found_archive_locales = FALSE;
-        gboolean found_dir_locales = FALSE;
+        gboolean found_locales;
         GError *error = NULL;
 
         if (gnome_available_locales_map == NULL) {
                 gnome_available_locales_map = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) gnome_locale_free);
         }
 
+        found_locales = collect_locales_from_ubuntu ();
 
-        if (!collect_locales_from_archive (&found_archive_locales, &error)) {
-                g_warning ("Failed to load locales from archive: %s", error->message);
-                g_clear_error (&error);
-        }
-
-        found_dir_locales = collect_locales_from_directory ();
-
-        if (!(found_archive_locales || found_dir_locales)) {
+        if (!found_locales) {
 #ifndef WITH_INCOMPLETE_LOCALES
                 g_warning ("Could not read list of available locales from libc, "
                            "guessing possible locales from available translations, "
@@ -877,6 +898,7 @@ languages_parse_start_tag (GMarkupParseContext      *ctx,
         const char *ccode_longT;
         const char *ccode;
         const char *ccode_id;
+        const char *lang_common_name;
         const char *lang_name;
 
         if (! (g_str_equal (element_name, "iso_639_entry") || g_str_equal (element_name, "iso_639_3_entry"))
@@ -888,6 +910,7 @@ languages_parse_start_tag (GMarkupParseContext      *ctx,
         ccode_longB = NULL;
         ccode_longT = NULL;
         ccode_id = NULL;
+        lang_common_name = NULL;
         lang_name = NULL;
 
         while (*attr_names && *attr_values) {
@@ -924,6 +947,11 @@ languages_parse_start_tag (GMarkupParseContext      *ctx,
                                 }
                                 ccode_id = *attr_values;
                         }
+                } else if (g_str_equal (*attr_names, "common_name")) {
+                        /* skip if empty */
+                        if (**attr_values) {
+                                lang_common_name = *attr_values;
+                        }
                 } else if (g_str_equal (*attr_names, "name")) {
                         lang_name = *attr_values;
                 }
@@ -932,6 +960,10 @@ languages_parse_start_tag (GMarkupParseContext      *ctx,
                 ++attr_values;
         }
 
+        if (lang_common_name != NULL) {
+                lang_name = lang_common_name;
+        }
+
         if (lang_name == NULL) {
                 return;
         }
@@ -1174,6 +1206,7 @@ gnome_get_language_from_locale (const char *locale,
         char *langinfo_codeset;
         char *translated_language;
         char *translated_territory;
+        char *modifier;
         gboolean is_utf8 = TRUE;
 
         g_return_val_if_fail (locale != NULL, NULL);
@@ -1191,12 +1224,13 @@ gnome_get_language_from_locale (const char *locale,
         language_code = NULL;
         territory_code = NULL;
         codeset_code = NULL;
+        modifier = NULL;
 
         gnome_parse_locale (locale,
                             &language_code,
                             &territory_code,
                             &codeset_code,
-                            NULL);
+                            &modifier);
 
         if (language_code == NULL) {
                 goto out;
@@ -1222,7 +1256,7 @@ gnome_get_language_from_locale (const char *locale,
                                         translated_territory);
         }
 
-        language_name_get_codeset_details (locale, &langinfo_codeset, &is_utf8);
+        //language_name_get_codeset_details (locale, &langinfo_codeset, &is_utf8);
 
         if (codeset_code == NULL && langinfo_codeset != NULL) {
                 codeset_code = g_strdup (langinfo_codeset);
@@ -1234,6 +1268,10 @@ gnome_get_language_from_locale (const char *locale,
                                         codeset_code);
         }
 
+        if (modifier != NULL) {
+                g_string_append_printf (full_language, " - %s", modifier);
+        }
+
  out:
         g_free (language_code);
         g_free (territory_code);
@@ -1241,6 +1279,7 @@ gnome_get_language_from_locale (const char *locale,
         g_free (langinfo_codeset);
         g_free (translated_language);
         g_free (translated_territory);
+        g_free (modifier);
 
         if (full_language->len == 0) {
                 g_string_free (full_language, TRUE);
-- 
1.8.1.2



